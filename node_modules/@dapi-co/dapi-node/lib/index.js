"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const crypto = require("crypto");
const auth_1 = require("./auth");
const data_1 = require("./data");
const payment_1 = require("./payment");
const metadata_1 = require("./metadata");
__exportStar(require("./helpers"), exports);
const operation_1 = require("./operation");
const request_1 = require("./request");
class App {
    constructor(config) {
        this.config = config;
        this.auth = new auth_1.default(config);
        this.data = new data_1.default(config);
        this.payment = new payment_1.default(config);
        this.metadata = new metadata_1.default(config);
        this.operation = new operation_1.default(config);
    }
    handleSDKDapiRequests(body, headers) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                body = body || {};
                headers = headers || {};
                body.appSecret = this.config.appSecret;
                const response = yield request_1.handleSDKDapiRequest(body, headers);
                return response.data;
            }
            catch (error) {
                if (error.response) {
                    return error.response.data;
                }
                console.error(error);
            }
        });
    }
    verifyWebhookSignature(body, headers, webhookSecret) {
        const hmac = crypto.createHmac('sha256', webhookSecret);
        hmac.update(headers['dapi-ts'] + body);
        const calculatedHmacSignature = hmac.digest().toString('base64');
        if (calculatedHmacSignature == headers['dapi-signature']) {
            //Signature is valid!
            //To protect against replay attacks you can check the difference between current time and the 'dapi-ts' timestamp
            return true;
        }
        //Invalid signature, ignore webhook
        return false;
    }
}
exports.default = App;
