export interface IValidatorProps {
    required: boolean;
    optional?: boolean;
    length: number;
    allowedCharacters: string;
    attributes: any[];
}
export interface IAddressValidatorProps {
    length: number;
    line1: IValidatorProps;
    line2: IValidatorProps;
    line3: IValidatorProps;
}
export interface ICreateBeneficiaryValidatorProps {
    name: IValidatorProps;
    nickname?: IValidatorProps;
    swiftCode?: IValidatorProps;
    address?: IAddressValidatorProps;
    branchAddress?: IValidatorProps;
    branchName?: IValidatorProps;
    country?: IValidatorProps;
    phoneNumber?: IValidatorProps;
    sortCode?: IValidatorProps;
}
export interface ICreateTransferValidatorProps {
    remarks?: IValidatorProps;
}
export interface IValidators {
    createBeneficiary: {
        local: ICreateBeneficiaryValidatorProps;
        same: ICreateBeneficiaryValidatorProps;
    };
    createTransfer: {
        local: ICreateTransferValidatorProps;
        same: ICreateTransferValidatorProps;
    };
}
interface IValidError {
    type: string;
    message: string;
}
export declare class ValidatorError extends Error {
    type: string;
    message: string;
    constructor(error: IValidError);
}
export {};
