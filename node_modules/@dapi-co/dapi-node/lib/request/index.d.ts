import { AxiosPromise } from 'axios';
import { IExchangeTokenResponse } from '../types/response/exchangeToken';
import { IGetIdentityResponse } from '../types/response/getIdentity';
import { IGetAccountsResponse } from '../types/response/getAccounts';
import { IGetBalanceResponse } from '../types/response/getBalance';
import { IGetTransactionsResponse } from '../types/response/getTransactions';
import { IGetBeneficiariesResponse } from '../types/response/getBeneficiaries';
import { IBaseResponse } from '../types/response/base';
import { ICBBeneficiary } from '../types/request/createBeneficiary';
import { ITransfer, ITransferAutoflow } from '../types/request/createTransfer';
import { ICreateTransferResponse } from '../types/response/createTransfer';
import { IGetAccountsMetadataResponse } from '../types/response/getAccountsMetadata';
import { IJobResumeResponse } from '../types/response/jobResume';
import { IUserInputs } from '../types/models/IUserInputs';
export declare const handleSDKDapiRequest: (body: any, headers: any) => AxiosPromise<any>;
export declare const requestExchangeToken: (accessCode: string, connectionID: string, appSecret: string) => Promise<import("axios").AxiosResponse<IExchangeTokenResponse>>;
export declare const requestDelinkUser: (accessToken: string, userSecret: string, appSecret: string) => Promise<import("axios").AxiosResponse<IExchangeTokenResponse>>;
export declare const requestGetIdentity: (accessToken: string, userSecret: string, appSecret: string, userInputs?: IUserInputs[]) => Promise<import("axios").AxiosResponse<IGetIdentityResponse>>;
export declare const requestGetAccounts: (accessToken: string, userSecret: string, appSecret: string, userInputs?: IUserInputs[]) => Promise<import("axios").AxiosResponse<IGetAccountsResponse>>;
export declare const requestGetBalance: (accessToken: string, userSecret: string, appSecret: string, accountID: string, userInputs?: IUserInputs[]) => Promise<import("axios").AxiosResponse<IGetBalanceResponse>>;
export declare const requestGetTransactions: (accessToken: string, userSecret: string, appSecret: string, accountID: string, fromDate: string, toDate: string, userInputs?: IUserInputs[]) => Promise<import("axios").AxiosResponse<IGetTransactionsResponse>>;
export declare const requestGetBeneficiaries: (accessToken: string, userSecret: string, appSecret: string, userInputs?: IUserInputs[]) => Promise<import("axios").AxiosResponse<IGetBeneficiariesResponse>>;
export declare const requestCreateBeneficiary: (beneficiairy: ICBBeneficiary, accessToken: string, userSecret: string, appSecret: string, userInputs?: IUserInputs[]) => Promise<import("axios").AxiosResponse<IBaseResponse>>;
export declare const requestCreateTransfer: (transfer: ITransfer, accessToken: string, userSecret: string, appSecret: string, userInputs?: IUserInputs[]) => Promise<import("axios").AxiosResponse<ICreateTransferResponse>>;
export declare const requestTransferAutoFlow: (transfer: ITransferAutoflow, accessToken: string, userSecret: string, appSecret: string, userInputs?: IUserInputs[]) => Promise<import("axios").AxiosResponse<ICreateTransferResponse>>;
export declare const requestGetAccountsMetadata: (accessToken: string, userSecret: string, appSecret: string, userInputs?: IUserInputs[]) => Promise<import("axios").AxiosResponse<IGetAccountsMetadataResponse>>;
export declare const getOperationStatus: (operationID: string, appSecret: string) => Promise<import("axios").AxiosResponse<IJobResumeResponse>>;
