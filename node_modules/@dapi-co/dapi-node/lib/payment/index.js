"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const productUtils_1 = require("../utils/productUtils");
const request_1 = require("../request");
class Payment {
    constructor(config) {
        this.utils = null;
        this.config = null;
        this.config = config;
        this.utils = new productUtils_1.default();
    }
    getBeneficiaries(accessToken, userSecret, userInputs) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield request_1.requestGetBeneficiaries(accessToken, userSecret, this.config.appSecret);
                return response.data;
            }
            catch (error) {
                return error.response.data;
            }
        });
    }
    createBeneficiary(beneficiairy, accessToken, userSecret, userInputs) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield request_1.requestCreateBeneficiary(beneficiairy, accessToken, userSecret, this.config.appSecret, userInputs);
                return response.data;
            }
            catch (error) {
                return error.response.data;
            }
        });
    }
    createTransfer(transfer, accessToken, userSecret, userInputs) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield request_1.requestCreateTransfer(transfer, accessToken, userSecret, this.config.appSecret, userInputs);
                return response.data;
            }
            catch (error) {
                return error.response.data;
            }
        });
    }
    transferAutoFlow(transfer, accessToken, userSecret, userInputs) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield request_1.requestTransferAutoFlow(transfer, accessToken, userSecret, this.config.appSecret, userInputs);
                return response.data;
            }
            catch (error) {
                return error.response.data;
            }
        });
    }
}
exports.default = Payment;
